extends ../page
  
block styles
  link(rel="stylesheet", href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css")

block append scripts
  script(src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js")
  script(type="text/javascript").
    function get_friends(){
      $.ajax({
        url: '/user/friends/'+my.id,
        method: 'GET'
      }).done(function(response){

        $('#friends').html(response);

        $('.delete-friend').on('click', function(e){
          $.ajax({
            url: '/user/friends/'+$(e.target).data('id'),
            method: 'DELETE'
          }).done();
        });
      });
    };
    
    function send_location(latitude, longitude, located) {
      latitude = parseFloat(latitude) || -1;
      longitude = parseFloat(longitude) || -1;
      
      $.ajax({
        url: '/user/location',
        method: 'PUT',
        data: {
          latitude: latitude,
          longitude: longitude,
          located: located ? 1 : 0
        }
      });
    }
    
    var LeafIcon = L.Icon.extend({
      options: {
        iconSize: [41, 41]
      }
    });
    
    var onlineMarkerIcon = new LeafIcon({iconUrl: '/images/marker_online.png'});
    var offlineMarkerIcon = new LeafIcon({iconUrl: '/images/marker_offline.png'});
    var noneMarkerIcon = new LeafIcon({iconUrl: '/images/marker_none.png'});
    var map = L.map('map').setView([51.505, -0.09], 13); 
    var markerLocation;
    
    function set_location(latitude, longitude, located, online) {  
      if (latitude && longitude) {
        map.setView([latitude, longitude], 13);
        
        if (markerLocation)
          map.removeLayer(markerLocation);
          
        markerLocation = new L.Marker([latitude, longitude], {
          icon: located ? (online ? onlineMarkerIcon : offlineMarkerIcon) : noneMarkerIcon
        });
        
        map.addLayer(markerLocation);
      } else {
        if (markerLocation)
          markerLocation.setIcon(located ? (online ? onlineMarkerIcon : offlineMarkerIcon) : noneMarkerIcon);
      }
      
      var location_status = $('#location-status');
      
      if (location_status.length) {
        if (located) {
            if (location_status.hasClass('unlocated'))
              location_status.removeClass('unlocated');
        } else {
          if (!location_status.hasClass('unlocated'))
            location_status.addClass('unlocated');
        }
      }
    }
    
    $(function(){  
      var messages_count = $('#messages .count');  
      var notifications = $('#notifications table');
      var notification_timer = null;
      
      function set_notification_timeout() {
        if (!notification_timer) {
          notification_timer = setTimeout(function(){
            notification_timer = null;	

            var list = $('tr', notifications);
            
            if (list.length) {	
              $(list[0]).remove();
              set_notification_timeout();
            }
          }, 10000);
        }
      }
      
      notifications.on('click', 'tr', function(){
        $(this).remove();
      });
      
      function add_notification(notification) {
        var notification_text = '<tr>' +
            '<td>' + 
              '<a href="' + notification.url + '">' + 
                '<img src="' + notification.avatar + '" width="60" height="60" alt="Новое сообщение">' + 
              '</a>' + 
            '</td>' +
            '<td class="vmiddle">' + 
              '<div>Новое сообщение</div>' + 
              '<div class="message">' + Utils.escapeHtml(notification.message) + '</div>' + 
            '</td>' + 
          '</tr>';

          notifications.append(notification_text);
          set_notification_timeout();
      }   
      
      function parse_response(response, socket) {
        for (var type in response) {
          var data = response[type];
          switch (type) {
              case 'unread_messages_count':
                set_messages_count(data);
                break;
              case 'message':
                add_notification({
                  url: '/messanger/' + data.id_user,
                  avatar: '/user/avatar/thumbnail/' + data.id_user,
                  message: data.message
                });
                break;
          }
        }  
      }
      
      function set_messages_count(count) {
        messages_count.text(count);  
      }
          
      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      get_friends();
      
      io.socket.on('user', function (event) {
        switch (event.verb) {
          case 'updated':
            var request = event.data;
            if (request.location) {
              var location = request.location;
              if (my.id == event.id) {
                set_location(location.latitude_last, location.longitude_last, location.located, my.online);
              }
            }
            
            break;
          case 'messaged':
            parse_response(event.data, true);
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:', event.verb, event);
        }
      });
    });
