extends ../layout

block body
  - var name = [user.firstname, user.lastname].join(' ')
  nav.navbar.navbar-default
    .container-fluid
      .navbar-header
        span.navbar-brand= name
      ul.nav.navbar-nav.navbar-right
        li
          a(href="/logout") Выход
  block container
  
block styles
  link(rel="stylesheet", href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css")

block scripts
  script(src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js")
  script(type="text/javascript").
    var my = JSON.parse('!{JSON.stringify(user)}');
    
    function get_friends(){
      $.ajax({
        url: '/user/friends/'+my.id,
        method: 'GET'
      }).done(function(response){

        $('#friends').html(response);

        $('.delete-friend').on('click', function(e){
          $.ajax({
            url: '/user/friends/'+$(e.target).data('id'),
            method: 'DELETE'
          }).done();
        });
      });
    };
    
    function set_status(status) {
      var avatar = [];

      if (my.id == status.id) {
        avatar = $('#avatar-wrapper');
        set_location(my.latitude_last, my.longitude_last, my.located, status.online);
      } else {
        avatar = $('div[data-status_user_id="' + status.id + '"]');
      }

      if (avatar.length) {
        if (status.online) {
          if (!avatar.hasClass('online'))
            avatar.addClass('online');
        } else {
          if (avatar.hasClass('online'))
            avatar.removeClass('online');
        }
      }
    }
    
    function send_location(latitude, longitude, located) {
      latitude = parseFloat(latitude) || -1;
      longitude = parseFloat(longitude) || -1;
      
      $.ajax({
        url: '/user/location',
        method: 'PUT',
        data: {
          latitude: latitude,
          longitude: longitude,
          located: located ? 1 : 0
        }
      });
    }
    
    var LeafIcon = L.Icon.extend({
      options: {
        iconSize: [41, 41]
      }
    });
    
    var onlineMarkerIcon = new LeafIcon({iconUrl: '/images/marker_online.png'});
    var offlineMarkerIcon = new LeafIcon({iconUrl: '/images/marker_offline.png'});
    var noneMarkerIcon = new LeafIcon({iconUrl: '/images/marker_none.png'});
    var map = L.map('map').setView([51.505, -0.09], 13); 
    var markerLocation;
    
    function set_location(latitude, longitude, located, online) {  
      if (latitude && longitude) {
        map.setView([latitude, longitude], 13);
        
        if (markerLocation)
          map.removeLayer(markerLocation);
          
        markerLocation = new L.Marker([latitude, longitude], {
          icon: located ? (online ? onlineMarkerIcon : offlineMarkerIcon) : noneMarkerIcon
        });
        
        map.addLayer(markerLocation);
      } else {
        if (markerLocation)
          markerLocation.setIcon(located ? (online ? onlineMarkerIcon : offlineMarkerIcon) : noneMarkerIcon);
      }
      
      var location_status = $('#location-status');
      
      if (location_status.length) {
        if (located) {
            if (location_status.hasClass('unlocated'))
              location_status.removeClass('unlocated');
        } else {
          if (!location_status.hasClass('unlocated'))
            location_status.addClass('unlocated');
        }
      }
    }
    
    $(function(){     
      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      get_friends();

      io.socket.get('/user/subscribe', function(resData, jwres){
        return;
      });
      
      io.socket.on('user_status', function(status) {
        if (Utils.isArray(status)) {
          for (var i in status) {
            set_status(status[i]);
          }
        } else {
          set_status(status);
        }
      });
      
      var pingInterval = setInterval(function() {
        $.ajax({
          url: '/user/ping',
          method: 'GET'
        });
      }, 60000);
      
      io.socket.on('user', function (event) {
        console.log(event);
        switch (event.verb) {
          case 'updated':
            var request = event.data;
            if (request.location) {
              var location = request.location;
              if (my.id == event.id) {
                set_location(location.latitude_last, location.longitude_last, location.located, my.online);
              }
            }
            
            break;
          default:
            console.warn('Unrecognized socket event (`%s`) from server:', event.verb, event);
        }
      });
    });
